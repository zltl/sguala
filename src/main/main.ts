import { app, BrowserWindow, ipcMain } from 'electron';
import { SshRemote } from './sshRemote';
import { initIpc } from './initIpc';
import conf, { confUpgrade } from './conf';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const SHELL_WINDOW_WEBPACK_ENTRY: string;
declare const SHELL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const SFTP_WINDOW_WEBPACK_ENTRY: string;
declare const SFTP_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


const inDevMode = process.argv.includes("--dev");

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let inited = false;
async function initEnv() {
  if (!inited) {
    initIpc();
    await confUpgrade();
    await conf.load();
    inited = true;
  }
}

const createWindow = async () => {
  await initEnv();
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    icon: path.join(__dirname, 'icon.ico'),
    height: 600,
    width: 800,
    autoHideMenuBar: true,
    titleBarStyle: 'hidden',
    titleBarOverlay: {
      color: '#1976d2',
      symbolColor: '#fff',
    },
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  inDevMode && mainWindow.webContents.openDevTools();
};

let shellCnt = 10010;
const createShellWIndow = async (uuid: string) => {
  await initEnv();

  const shellWindow = new BrowserWindow({
    icon: path.join(__dirname, 'icon.ico'),
    height: 600,
    width: 800,
    autoHideMenuBar: true,
    webPreferences: {
      additionalArguments: [`uuid=${uuid}`, `shellCnt=${shellCnt}`],
      preload: SHELL_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
    },
  });

  shellWindow.loadURL(SHELL_WINDOW_WEBPACK_ENTRY + `?uuid=${uuid}&shellCnt=${shellCnt}`);
  inDevMode && shellWindow.webContents.openDevTools();

  console.log('start shell');

  const server = conf.getServer(uuid);
  if (!server) {
    console.log('server not found');
    return;
  }
  SshRemote.shell({ ...server, windowId: shellCnt }, shellWindow);

  shellWindow.on('closed', () => {
    SshRemote.deleteShellServerClient({ ...server, windowId: shellCnt });
  });

  shellCnt++;
}

ipcMain.handle('shell-window', async (event, uuid: string) => {
  console.log('shell-window', uuid);
  await createShellWIndow(uuid);
});

const createSftpWindow = async (uuid: string) => {
  await initEnv();

  const sftpWindow = new BrowserWindow({
    icon: path.join(__dirname, 'icon.ico'),
    height: 600,
    width: 800,
    autoHideMenuBar: true,
    webPreferences: {
      additionalArguments: [`uuid=${uuid}`, `shellCnt=${shellCnt}`],
      preload: SFTP_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
    },
  });

  sftpWindow.loadURL(SFTP_WINDOW_WEBPACK_ENTRY + `?uuid=${uuid}&shellCnt=${shellCnt}`);
  inDevMode && sftpWindow.webContents.openDevTools();

  console.log('start sftp');

  const server = conf.getServer(uuid);
  if (!server) {
    console.log('server not found');
    return;
  }
  SshRemote.sftp({ ...server, windowId: shellCnt }, sftpWindow);

  sftpWindow.on('closed', () => {
    SshRemote.deleteSftpServerClient({ ...server, windowId: shellCnt });
  });

  shellCnt++;
};
ipcMain.handle('sftp-window', async (event, uuid: string) => {
  console.log('sftp-window', uuid);
  await createSftpWindow(uuid);
});


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
//app.on('ready', createWindow);
app.on('ready', () => createWindow());

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
